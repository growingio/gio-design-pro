name: Continuous Delivery
on:
  push:
    branches:
      - master
jobs:
  install:
    name: Install dependencies
    if: ${{ !startsWith(github.event.pull_request.title, 'chore') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2.1.2
        with:
          node-version: 12.x
      - name: Cache Node.js modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install
        if: ${{ steps.cache-node-modules.outputs.cache-hit != 'true' }}
        run: yarn install
  lint:
    name: Lint Checks
    needs: install
    if: ${{ !startsWith(github.event.pull_request.title, 'docs') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2.1.2
        with:
          node-version: 12.x
      - name: Restore Node.js modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: Lint pull request title
        run: echo "${{ github.event.pull_request.title }}" | npx commitlint
      - name: Lint commits count
        if: ${{ github.event.pull_request.commits > 3 }}
        run: echo "::error::The commits of pull request should not be more than 3 && exit 1"
      - name: StyleLint
        run: yarn stylelint
      - name: ESLint
        run: yarn eslint
  test:
    name: Test Coverage
    needs: install
    if: ${{ !startsWith(github.event.pull_request.title, 'docs') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2.1.2
        with:
          node-version: 12.x
      - name: Restore Node.js modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: Test
        run: yarn test --coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: coverage/
  build:
    name: Build Package
    needs: install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2.1.2
        with:
          node-version: 12.x
      - name: Restore Node.js modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}
      - name: Cache package
        id: cache-package
        uses: actions/cache@v2
        with:
          path: |
            dist
            es
          key: package-${{ github.sha }}
      - name: Build package
        if: steps.cache-package.outputs.cache-hit != 'true'
        run: yarn build
  publish:
    name: Publish package
    needs: build
    if: ${{ startsWith(github.event.head_commit.message, 'docs(release)') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2.1.2
        with:
          node-version: 12.x
          registry-url: 'https://registry.npmjs.org'
      - name: Restore package from cache
        uses: actions/cache@v2
        with:
          path: |
            dist
            es
          key: package-${{ github.sha }}
      - name: Publish package
        run: yarn publish --non-interactive --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Get package version
        id: get-package-version
        run: echo "::set-output name=version::$(node script/version.js)"
      - name: Publish GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get-package-version.outputs.version }}
          release_name: v${{ steps.get-package-version.outputs.version }}
          body_path: VERSION.md
          draft: false
          prerelease: false
